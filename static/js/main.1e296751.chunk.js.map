{"version":3,"sources":["components/search-box.jsx","components/location-box.jsx","components/weather-box.jsx","App.js","serviceWorker.js","index.js"],"names":["SearchBox","props","className","onSubmit","loadweather","error","type","placeholder","name","autoComplete","LocationBox","city","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Weather","Math","round","temp","weather","humidity","pressure","api","App","getWeather","e","a","preventDefault","target","elements","value","fetch","api_call","json","result","setState","sys","main","console","log","state","undefined","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.1e296751.chunk.js","sourcesContent":["import React from 'react';\n\nconst SearchBox = props => {\n        return (\n            <div className=\"search-box\">\n                <form onSubmit={props.loadweather}>\n                    <div>{props.error ? error() : \"\"}</div>\n                    <input\n                        type=\"text\"\n                        className=\"search-bar\"\n                        placeholder=\"City\"\n                        name=\"city\"\n                        autoComplete=\"off\"\n                    />\n                </form>\n            </div>\n        )\n    \n}\n\nfunction error() {\n    return (\n        <div>Error Kurwa</div>\n    );\n}\n\nexport default SearchBox","import React from 'react';\n\nconst LocationBox = props => {\n\n    const dateBuilder = (d) => {\n        let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n        let days = [\"Monday\", \"Tuesday\", \"Wednsday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n    \n        let day = days[d.getDay()];\n        let date = d.getDate();\n        let month = months[d.getMonth()]\n        let year = d.getFullYear();\n    \n        return `${day} ${date} ${month} ${year}`\n    }\n\n    return (\n        <div className=\"location-box\">\n            <div className=\"location\">\n                   {props.city}, {props.country}\n            </div>\n            <div className=\"date\">\n                {dateBuilder(new Date())}\n            </div>\n        </div>\n    )\n    \n}\n\nexport default LocationBox","import React from 'react';\n\nconst Weather = props => {\n        return (\n            <div className=\"weather-box\">\n                <div className=\"temp\">\n                    {Math.round(props.temp)}&deg;\n                </div>\n                <div className=\"weather\">\n                    {props.weather}\n                </div>\n                <div className=\"humidity\">\n                    Humidity: {props.humidity}&#37;\n                </div>\n                <div className=\"pressure\">\n                    Pressure: {props.pressure} hPa\n                </div>\n            </div>\n        )\n    \n}\n\nexport default Weather","import React from 'react'\nimport SearchBox from './components/search-box'\nimport LocationBox from './components/location-box'\nimport WeatherBox from './components/weather-box'\n\nconst api = {\n  key: \"208785914316c48739fa81461e32198d\",\n  base: \"https://api.openweathermap.org/data/2.5/\"\n}\n\nclass App extends React.Component {\n  \n  constructor(){\n    super();\n    this.state = {\n      city: undefined,\n      country: undefined,\n      temp: undefined,\n      weather: undefined,\n      error: false,\n      main: undefined,\n      humidity: undefined,\n      pressure: undefined\n    };\n  }\n\n  getWeather = async e => {\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n\n    if(city){\n      const api_call = await fetch(\n        `${api.base}weather?q=${city}&units=metric&APPID=${api.key}`\n        );\n        \n      const result = await api_call.json();\n          \n      this.setState({\n          city: `${result.name}`,\n          country: result.sys.country,\n          temp: result.main.temp,\n          weather: result.weather[0].main,\n          main: result.weather[0].main,\n          humidity: result.main.humidity,\n          pressure: result.main.pressure\n        })\n\n        console.log(result);\n    } else {\n      this.setState({error: true});\n    }\n    \n  }\n\n  render() {\n    return (\n      <div className='App'>\n        <main>\n          <SearchBox loadweather={this.getWeather} error={this.state.error}/>\n          {(typeof this.state.main !=\"undefined\") ? (\n            <div className=\"content-box\">\n              <LocationBox \n                city={this.state.city} \n                country={this.state.country}\n              />\n              <WeatherBox \n                temp={this.state.temp} \n                weather={this.state.weather}\n                humidity={this.state.humidity}\n                pressure={this.state.pressure}\n              />\n            </div>\n          ) : ('')}\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}